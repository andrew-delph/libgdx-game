buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
        classpath 'com.robovmx:robovm-gradle-plugin:10.2.2-SNAPSHOT'
    }
}

plugins {
    id "com.google.protobuf" version "0.8.18"
    id "java"
    id 'pl.allegro.tech.build.axion-release' version '1.8.1'
//    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

//jar {
//    manifest {
//        attributes 'Multi-Release': 'true'
//    }
//}

scmVersion {
    useHighestVersion = true
    tag {
        prefix = 'v'
        versionSeparator = ''
    }
    repository {
        pushTagsOnly = true
    }
    branchVersionIncrementer = [
            'master': 'incrementMajor',
            'stage' : 'incrementMinor',
            'dev'   : 'incrementPatch'
    ]
    hooks {
        pre {
            context ->
                println "current version is " + context.currentVersion
                (new File(System.getProperty("user.dir") + "/core/assets/project.version")).write(context.currentVersion)
                executeCommand("git fetch")
                executeCommand("git add .")
                executeCommand("git status")
                executeCommand("git -c user.name=\"Version_Bump\" -c user.email=\"\"  commit -m \"Version_Bump\"")
                if (project.hasProperty("push")) {
                    println "PUSHING LAST COMMIT"
                    executeCommand("git push origin")
                }
        }
    }
}
project.version = scmVersion.version

def executeCommand(String command) {
    println "executeCommand: " + command
    def proc = command.execute()
    proc.waitFor()
    println "Process exit code: ${proc.exitValue()}"
    def result = proc.in.text
    println "Std Err: ${proc.err.text}"
    println "Std Out: $result"
    if (proc.exitValue() != 0) {
        sleep(3 * 1000)
        throw new GradleException('error occurred')
    }
}

def protobufVersion = '3.0.0'
def grpcVersion = '1.32.1'

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

allprojects {
    apply plugin: "eclipse"
    version = '1.0'
    ext {
        appName = "my-gdx-game"
        gdxVersion = '1.9.12'
        roboVMVersion = '10.2.2-SNAPSHOT'
        box2DLightsVersion = '1.5'
        ashleyVersion = '1.7.3'
        aiVersion = '1.8.2'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":core") {
    apply plugin: "java-library"
    apply plugin: 'java'
    apply plugin: 'com.google.protobuf'
    dependencies {

        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        implementation 'junit:junit:4.12'
        implementation 'io.grpc:grpc-netty:1.32.1'
        implementation 'io.grpc:grpc-okhttp:1.32.1'
        implementation 'io.grpc:grpc-protobuf:1.32.1'
        implementation 'io.grpc:grpc-stub:1.32.1'
        implementation "io.grpc:grpc-services:1.32.1"
        implementation 'org.apache.tomcat:annotations-api:6.0.53'
        implementation 'com.google.inject:guice:4.0:no_aop'
        implementation "com.google.guava:guava:31.1-jre"

        implementation "org.javatuples:javatuples:1.2"

        testImplementation 'org.hamcrest:hamcrest-library:2.1'
        testImplementation "org.mockito:mockito-all:1.9.5"
        testImplementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
        testImplementation "com.badlogicgames.gdx:gdx:$gdxVersion"
        testImplementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        testImplementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"

    }
    sourceSets {
        main {
            java {
                srcDirs = ["src/"]
            }
            resources {
                srcDirs = ["../core/assets"]
            }
            proto {
                srcDir 'src/proto'
                include '**/*.proto'
            }
        }
    }
    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }
}

project(":ios") {
    apply plugin: "java-library"
    apply plugin: "robovm"

    dependencies {
        implementation project(":core")
//        api "com.mobidevelop.robovm:robovm-rt:$roboVMVersion"
//        api "com.mobidevelop.robovm:robovm-cocoatouch:$roboVMVersion"
        implementation "com.robovmx:robovm-rt:${roboVMVersion}"
        implementation "com.robovmx:robovm-cocoatouch:${roboVMVersion}"
        api "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"

        implementation 'com.google.inject:guice:4.0:no_aop'
        implementation "org.javatuples:javatuples:1.2"

//        testImplementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"

//        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
//        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
//        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
//        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
//        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
//        api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
//        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
//        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
//        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
//        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
//        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"

    }
}

project(":desktop") {
    apply plugin: "java-library"
    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
        implementation 'com.google.inject:guice:4.0:no_aop'
    }
}

task buildEXE {
    dependsOn tasks.getByPath(':desktop:dist')
    doFirst {
        delete 'out'
        exec {
            workingDir "."
            commandLine 'java', '-jar', 'packr-all-4.0.0.jar', '--jdk', 'https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.14.1%2B1/OpenJDK11U-jdk_x64_windows_hotspot_11.0.14.1_1.zip', '--platform', 'windows64', '--executable', 'myapp', '--classpath', 'desktop/build/libs/desktop-1.0.jar', '--mainclass', 'main.ClientGameMain', '--vmargs', 'Xmx1G', '--output', 'out'
        }
    }
    doLast {
        def ENV = System.getenv("ENV") ?: "prod"
        copy {
            from file('environment/' + ENV + '.config.properties')
            into 'out/'
            rename { 'config.properties' }
        }
    }
}

task zipit(type: Zip) {
    dependsOn tasks.getByPath('buildEXE')
    delete file("$projectDir/dist/game.zip")
    archiveFileName = "game.zip"
    destinationDirectory = file("$projectDir/dist")
    from "out"
}

clean {
    delete "dist", "out"
}

task writeAllAssetsToFile {
    doLast {
        def assetsFolder = new File("${project.rootDir}/core/assets/")

        FileFilter isDir = new FileFilter() {
            boolean accept(File file) {
                return file.isDirectory();
            }
        };

        FileFilter isFile = new FileFilter() {
            boolean accept(File file) {
                return file.isFile();
            }
        };

        def handle_folder
        handle_folder = {
            File folder ->
                def assetsFile = new File(folder, "assets.txt")
                assetsFile.delete()
                folder.listFiles(isFile).collect { assetsFolder.relativePath(it) }.each {
                    assetsFile.append(it + "\n")
                }
                folder.listFiles(isDir).each {
                    handle_folder(it)
                }
        }
        handle_folder(assetsFolder)
    }
}





